module i2c(clk,
           reset,
           avalon_chipselect,
           avalon_address,
           avalon_write,
           avalon_writedata,
           avalon_read,
           avalon_readdata,
           chipselect,
		address,
           read,
           readdata,
           write,
           writedata,
           I2C_SCL,
           I2C_SDA,
           I2C_TEST_OUT);


    input   clk, reset;
    

    // Avalon MM interface (8 word aperature)
    input             avalon_chipselect,avalon_read,avalon_write;
    input [1:0]       avalon_address;
    input [31:0]      avalon_writedata;
    output reg [31:0] avalon_readdata;
    output            chipselect,read,write;
    output [1:0]      address;   
    output [4:0]      writedata;  
    output [4:0]      readdata;	 
         
           
    
    // gpio interface
    //inout reg [31:0]  data;
    output I2C_SCL;
    output I2C_SDA;
    output I2C_TEST_OUT;
	 
	 
	 reg [6:0] int_address;
    reg [7:0] data;
    reg [31:0] status;
	 reg [31:0] control;    
    
    // register map
    // ofs  fn
    //   0  data (r/w)
    //   4  out (r/w)
    //   8  od (r/w)
    //  12  int_enable (r/w)
    //  16  int_positive (r/w)
    //  20  int_negative (r/w)
    //  24  int_edge_mode (r/w)
    //  28  int_status_clear (r/w1c)
    
    // register numbers
    parameter ADDRESS_REG = 2'b00;
	 parameter DATA_REG    = 2'b01;
	 parameter STATUS_REG  = 2'b10;
	 parameter CONTROL_REG = 2'b11;
    
    
    // read register
    always @ (*)
    begin
        if (avalon_read &&  avalon_chipselect)
            case (avalon_address)
               ADDRESS_REG: 
                  avalon_readdata  = int_address;
               DATA_REG: 
                  avalon_readdata  = data;
               STATUS_REG:
                   avalon_readdata = status;
               CONTROL_REG:
                   avalon_readdata = control;
            endcase
        else
            avalon_readdata = 32'b0;
    end        

    // write register
    always @ (posedge clk)
    begin
        if (reset)
        begin
            int_address[6:0] <= 7'b0;
            data[7:0]        <= 8'b0;
				status[31:0]     <= 32'b0;
				control[31:0]    <=32'b0;
        end
        else
        begin
            if (avalon_write && avalon_chipselect)
            begin
                case (avalon_address)
                     ADDRESS_REG: 
                       int_address  <= avalon_writedata;
                     DATA_REG: 
                       data         <= avalon_writedata;
                     STATUS_REG:
                       status       <= avalon_writedata;
                     CONTROL_REG:
                       control      <= avalon_writedata;
                endcase
            end
        end
    end

assign  chipselect = avalon_chipselect;
assign  read       = avalon_read;
assign  write      = avalon_write;
assign  address    = avalon_address;
assign  writedata  = control[4:0];
assign  readdata   = avalon_readdata[4:0];

endmodule 